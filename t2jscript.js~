
/*
 * returns all open windows to callback function
*/
function getAllWindows(callback){
  chrome.windows.getAll( {populate : true}, function (windows){
    update_sessionWin(windows);
    currentSessionID = -1;
    chrome.extension.sendMessage("request",function(response){
    addTabhistory(response);
  });
    
    var d1 = document.getElementById("midpane");
    d1.innerHTML = "Current Session" + "&nbsp";
    // document.getElementById("midpane").innerHTML = "<a href = '#'>Current Session</a>";
    currentFolder = "root";
    callback(sessionWin);
  });
}

/*
 * write tabs to the main html page with checkbox;
 * all windows displaying label has id of type ##win;  ## represent number
 * all checkboxes tabs displaying tags have id of type ##tab; 
 * all a tags have id tab.id+url which is unique 
 * both windows and tabs labels have class 'urlList' 
 * checkbox are present before each url and window 
*/
function writeTabs (windows) {

  var d1=document.getElementById('t2');
  d1.innerHTML = '<div></div>';
  updateTabsNumber(0);

  var winid = 0, tabid = 0;
  var label = '<label style="margin: 1em 0 0 1em;"><input type="checkbox" class="urlList" value=';

  for (var j= 0; j< windows.length; j++){
    winid = j+"win";
    d1.insertAdjacentHTML('beforeend','<div  id='+'@'+winid+'@>'+label+winid+' id="null" ><a style="color: black" href=# id='+j+'winbutton> Windows '+j+'</button></label><br>');    
    var d2 = document.getElementById('@'+winid+'@');

    var tabs = windows[j].tabs;
    for(var i=0;i<tabs.length;i++) {

      tabid = i +'tab';
      var favIcon = '<img height="16" width="16" hspace="8" src='+'"undefinedicon.png" >  ';
      if(tabs[i].favIconUrl)
      favIcon = '<img height="16" width="16" hspace="8" src='+tabs[i].favIconUrl+'>  ';
      var atag = '<a href='+tabs[i].url+' id='+tabs[i].id + 'url style="color: #A40017">'+tabs[i].title+'</a>';
      // var hash = '&nbsp<button type="button" id='+tabid+j+'hash value='+winid+'  style="width:20px;height:20px; background: transparent;  position: relative;  font-size: 10px; color: rgb(194, 0, 5);border-radius: 0px; :hover {background: #000000;}" class = "poping" data-toggle="popover" data-placement = "top"
// > <span class="glyphicon glyphicon-tag" id="hashgly" style="top: 0.5px; left: -2px"></span></button>';      

      // var annotation = '&nbsp<button type="button" id='+tabid+j+'annotation value='+winid+' style="width:20px;height:20px; background: transparent;  position: relative;  font-size: 10px; color: rgb(194, 0, 5);border-radius: 0px; :hover {background: #000000;}" class = "poping" data-toggle="popover" data-placement = "top"
// > <span class="glyphicon glyphicon-pencil" id="hashgly" style="top: 0.5px; left: -2px"></span></button>';
    
    var hash = '&nbsp<button type="button" id='+tabid+j+'hash value='+winid+'  style="width:20px;height:20px; background: transparent;  position: relative;  font-size: 10px; color: rgb(194, 0, 5);border-radius: 0px; :hover {background: #000000;}" class = "poping" data-toggle="popover" data-placement = "top"> <span class="glyphicon glyphicon-tag" id="hashgly" style="top: 0.5px; left: -2px"></span>>Hash</button>';      

    var annotation = '&nbsp<button type="button" id='+tabid+j+'annotation value='+winid+' style="width:20px;height:20px; background: transparent;  position: relative;  font-size: 10px; color: rgb(194, 0, 5);border-radius: 0px; :hover {background: #000000;}" class = "poping" data-toggle="popover" data-placement = "top"> <span class="glyphicon glyphicon-pencil" id="hashgly" style="top: 0.5px; left: -2px"></span>>Annotation</button>';


    var tabhistory = '&nbsp<button type="button" id='+tabid+j+'tabhistory value='+winid+' style="width:20px;height:20px; background: transparent;  position: relative;  font-size: 10px; color: rgb(194, 0, 5);border-radius: 0px; :hover {background: #000000;}" class = "poping" data-toggle="popover" data-placement = "top"><span class="glyphicon glyphicon-header" id="hashgly" style="top: 0.5px; left: -2px"></span>Tabhistory</button>';



      d2.insertAdjacentHTML('beforeend','<span>'+label+winid+' id='+tabid+'>'+tabhistory+hash+annotation+favIcon+atag+'</label><br></span>'); 
      
      document.getElementById(tabs[i].id + 'url').onclick = function(){ openUrl(this); return false; };
      document.getElementById(tabid + j+'hash').onclick = function(){ additional(this,'hash'); };
      document.getElementById(tabid + j+'annotation').onclick = function(){ additional(this,'annotation'); };
      document.getElementById(tabid + j+'tabhistory').onclick = function(){ gettabhist(this); };

      $('#'+tabid + j+'hash').hover(
         function() {
          var winno = parseInt(this.value);
          var tabno = parseInt(this.id);
          var tab = sessionWin[winno].tabs[tabno];

          $(this).attr("data-content",  tab.hashtags );
          $(this).popover('show');
          }, function() {
              $(this).popover('hide');
                        }
          );

       $('#'+tabid + j+'annotation').hover(
         function() {
          var winno = parseInt(this.value);
          var tabno = parseInt(this.id);
          var tab = sessionWin[winno].tabs[tabno];

          $(this).attr("data-content",  tab.annotation );
          $(this).popover('show');
          }, function() {
              $(this).popover('hide');
                        }
          );

     }

     d1.insertAdjacentHTML('beforeend','</div>');
     document.getElementById(j+"winbutton").onclick = function(){  openWindow(sessionWin, parseInt(this.id) ) };
      updateTabsNumber(tabs.length);
    }
}

/*
 * create button inside the element with id documentid 
 * button has id and name given by parameters
*/
function createButton(documentid, buttonid, buttonname){

  var d1=document.getElementById(documentid);
  var button = '<button class="btn btn-primary btn-lg" id=';
  var buttonstyle = ' style="width:230px;height:50px; background: #A40017; padding: 10px 20px 10px 20px;  border-radius: 0px; outline-color: white; border: solid #000000 0px;">';
  d1.insertAdjacentHTML('afterend', button+buttonid+buttonstyle+buttonname+'</button><br>');
}


function gettabhist(button){
  var winno = parseInt(button.value);
  var tabno = parseInt(button.id);
  var tab = sessionWin[winno].tabs[tabno];
  
  var c = buildPopupDom(tab.tabhistory);
  document.getElementById("chromealert1").innerHTML = c;
  $("#myModal1").modal('show');
  
 }

function buildPopupDom(data) {
  
  var k = "";
  var div1 ="<span>No Tab History Saved</span>";
  if(data.length > 0)
  {
  for (var i = 0; i < data.length; ++i) {
    
     k += '<li><a href = '+data[i]+'target = "_blank">'+data[i]+'</a></li>';

  }
  div1 = '<div><ul>'+k+'</ul></div>';
}
 return div1 ;
}


/*
* remove tabs that are selected using checkboxes from the main HTML page 
* checkbox value is of type #win where # represent windows index in sessionWin
* checkbox id is of type #tab where # is tab index in tabs array
*/

function removeCheckedboxes(){
  
  var checkedboxes=document.querySelectorAll('input[class="urlList"]:checked');
  if(checkedboxes.length>0){
  console.log(checkedboxes.length);
  var win = new Array();
  var totwin = 0;
  copy(sessionWin,win);
  
  stack.push(win);
  stack.push(currentSessionID);
  stack.push(2);
  // console.log(checkedboxes.length);
  for (var i=0; i<checkedboxes.length; i++){
   var value = checkedboxes[i].value;
   var id = checkedboxes[i].id;
   console.log(value + id);
   var winno = parseInt(value);
   
    if(id == 'null')
    {
      winno = winno - totwin;
      sessionWin.splice(winno, 1);
      totwin++;
    }
    
    else {      
      var tabno = parseInt(id);
      tabno = tabno - i;
      sessionWin[winno].tabs.splice(tabno,1);
      
    }
  }

  writeTabs(sessionWin);
  if(currentSessionID!=-1)
    {
      key = currentSessionID;
      var item = JSON.stringify(sessionWin);
      var jsonfile = {};
      jsonfile[key] = item;
      chrome.storage.sync.set(jsonfile);
      localStorage.setItem(key,item);
      changemodal(key);
      //alert("Your changes have been saved in session named as: "+ key);
    }
  }
}
function changemodal(key){
  //alert("Your changes have been saved in session named as: "+ key);
  key = key.split('@');
    document.getElementById("chromealert").innerHTML = "Your changes have been saved in session named as: "+ key[2] ;
    $("#myModal").modal('show');
          
}


/*
 * update tabs number on following events
 * displaying currently open session
 * removing some windows or tabs from main HTML
 * displaying stored session
 * to reset tab number length is passed as zero
 */
function updateTabsNumber(length){
  var d2=document.getElementById('number');
  var temp = parseInt(d2.innerHTML);
  if(length == 0 ) temp = 0;
  d2.innerHTML = length + temp;
}
/*
 * open the windows in new window
 */
function openWindow(windows , index){
  var win;
  if(index != -1){
    win = new Array();
    win.push(windows[index]);
  }
  else win = windows;
  for (var i = 0; i < win.length; i++) {
   var tabs = win[i].tabs;
   var arr = new Array();
   var len = 0;
   for(j=0; j<tabs.length;j++){
       arr[len] = tabs[j].url;
       len++;
     }
   chrome.windows.create({url:arr});
  }
}

/*
 * refocus the tab url if its already open 
 * else open tab in new tab 
 */
function openUrl(atag){
  var url = atag.href;
  chrome.tabs.query({windowId:chrome.windows.WINDOW_ID_CURRENT},function(tabs){

 for(i=0;i<tabs.length;i++){
    if(tabs[i].url == url){
      chrome.tabs.update(tabs[i].id,{highlighted:true});
    return;
    }
  }
  //if(flag==0)
    chrome.tabs.create({url: url});
  });
}
/*
 * gets hash tags or annotation from user and push it in respective tabs
 * hashtags are of format #string and annotation are simple string
 */
 function additional(button, type){
  var winno = parseInt(button.value);
  var tabno = parseInt(button.id);
  var tab = sessionWin[winno].tabs[tabno];
  var value;
  $(".popovercallModal").remove();

  if(tab){   

    if(type == "hash")
    {
      $( "body" ).append(getmymodal(tab.hashtags));
    }
    else {
      $( "body" ).append(getmodal(tab.annotation));
    }
    //document.body.innerHTML += '<br>'+ getmymodal();
    document.getElementById("popovertext").innerHTML = "Please Enter " + type;
    $(".popovercallModal").modal('show');

    $(".popsubmit").click(function(){
    value = $("#popoverinputtext").val(); 
   // console.log("lollllalalalal"+value);
    if(value == null || value == "") return;
    
    if(type == "hash") {
      var hashtags = value.split(" ");
      tab.clear();
      for (var i = 0; i < hashtags.length; i++) {
        if(hashtags[i].indexOf('#') > -1){
        tab.pushHashTags(hashtags[i]);
        //updateAllHashtags(hashtags[i], new Tabposition(currentSessionID, winno, tab.id));
        
        }
        else {
          //alert("Error Please enter # in hash tags");
          document.getElementById("chromealert").innerHTML = "Error Please enter # in hash tags";
          $("#myModal").modal('show');
        }
      };
      sessionWin[winno].tabs[tabno] = tab;
    }
    else if (type == "annotation"){
      //alert(tab.annotation);
      var annotation = value;
      tab.pushAnnotation(annotation);
    sessionWin[winno].tabs[tabno] = tab;
      
      //alert(tab.annotation);
    }

    if(currentSessionID != -1)
    {
      var item = JSON.stringify(sessionWin);
      var jsonfile = {};
      jsonfile[currentSessionID] = item;
      chrome.storage.sync.set(jsonfile);
      localStorage.setItem(currentSessionID,item);
       document.getElementById("chromealert").innerHTML = type+" has been saved";
          $("#myModal").modal('show');
        allHashtags();
    }
  });
  // // alert(tab.hashtags); 
  //   // var value = prompt("Please Enter " + type);
  //   if(value == null || value == "") return;

  //   if(type == "hash") {
  //     var hashtags = value.split(" ");
  //     for (var i = 0; i < hashtags.length; i++) {
  //       if(hashtags[i].indexOf('#') > -1){
  //       tab.pushHashTags(hashtags[i]);
  //       //updateAllHashtags(hashtags[i], new Tabposition(currentSessionID, winno, tab.id));
        
  //       }
  //       else alert("Error Please enter # in hash tags");
  //     };
  //   }
  //   else if (type == "annotation"){
  //     //alert(tab.annotation);
  //     var annotation = value;
  //     tab.pushAnnotation(annotation);
  //     alert(tab.annotation);
  //   }
    
  }
 }


function searchall(text){
  var hashtags;
  hashtags = text.split(" ");
  if(hashtags.length != undefined){
    display(hashtags);
  }
}

function addTabhistory(tabhistory){
  for (var i = 0; i < sessionWin.length; i++) {
    var tabs = sessionWin[i].tabs;
    for (var j = 0; j < tabs.length; j++) {
      var tabid = tabs[j].id;
      var history = tabhistory[tabid];
      if(history)
      tabs[j].pushTabhistory(history);
    };
  };
}

function copy(oldwin, newwin){
  for(i=0;i<oldwin.length;i++){
    newwin[i] = new Window(oldwin[i].id);
    // console.log(oldwin.tabs.l)
    newwin[i].tabs = oldwin[i].tabs.slice();
  }
}

function UndoDelete(){

  if(stack.length>0){
    var flag = stack.pop();
    var key = stack.pop();
    var windows = stack.pop();
    console.log("done key = "+key);
    if(key!=-1){
      var item = JSON.stringify(windows);
      var jsonfile = {};
      jsonfile[key] = item;
      chrome.storage.sync.set(jsonfile);
      localStorage.setItem(key,item);
    }
    if(flag=="2")
    {
      update_sessionWin(windows);
      writeTabs(sessionWin);
    }
    else if(flag=="1" || flag=="3")
      printAll();
  }
  
}

function StoreBookMarks(id,title){
  chrome.bookmarks.getChildren(id, function(children) {
      children.forEach(function(bookmark) { 
        var myid = bookmark.id;
    
        chrome.bookmarks.getChildren(myid, function(ch){
          
          if(ch.length == '0'){
             var key_with_space = title;
             var key_without_space = "_Parent__@Bookmark_Bar@"+key_with_space.replace(/ /g,"_");
             var win = JSON.parse(localStorage.getItem(key_without_space));
             
             win[0].tabs.push(new Tab(bookmark));
             var len1 = win[0].tabs.length;
             console.log(len1);
             var item = JSON.stringify(win);
             var jsonfile = {};
             jsonfile[key_without_space] = item;
             chrome.storage.sync.set(jsonfile);
             localStorage.setItem(key_without_space,item);
          }
          else{
             var key_with_space = bookmark.title;
             var key_without_space = "_Parent__@Bookmark_Bar@"+key_with_space.replace(/ /g,"_");
             var win = new Array();
             win[0] = new Window(bookmark.id,null);
             // var win = new Window(bookmark.id);
             var item = JSON.stringify(win); 
             var jsonfile = {};
             jsonfile[key_without_space] = item;
             chrome.storage.sync.set(jsonfile);
             localStorage.setItem(key_without_space,item);
             var folder = JSON.parse(localStorage.getItem("_Folders__Bookmark_Bar"));
              folder.id.push(key_without_space);
              var jsonfile = {};
              jsonfile["_Folders__Bookmark_Bar"] = item;
              chrome.storage.sync.set(jsonfile);
              localStorage.setItem("_Folders__Bookmark_Bar", JSON.stringify(folder));
             StoreBookMarks(bookmark.id,bookmark.title);
          }
        });
    });
 });

}


function UnSavedSession(){
  
  var currentdate = new Date(); 
  var key_without_space = "Last_Sync_" + currentdate.getDate() + "_"
                + (currentdate.getMonth()+1)  + "_" 
                + currentdate.getFullYear() + "_"  
                + currentdate.getHours() + "_"  
                + currentdate.getMinutes();
  
  if(queue.length == 10){
    var key = queue.shift();
    console.log(key);
    localStorage.removeItem(key);
  }
  queue.push(key_without_space);
  chrome.windows.getAll( {populate : true}, function (windows){
            var item = JSON.stringify(windows);
            localStorage.setItem(key_without_space,item);
            console.log(key_without_space);
          });

   // if(currentSessionID==-1)
      // location.reload();
      //printAll();
}

function TimeInterval(){
  chrome.alarms.create('alarm1',{periodInMinutes : 1.0});
}


chrome.alarms.onAlarm.addListener(function(alerm){
  console.log("jwhdb");
  UnSavedSession();
});


function ClearAll(){
  localStorage.clear();
  chrome.storage.sync.clear();
  location.reload();

}



document.getElementById("Save").onclick = function () { save(sessionWin); };
document.getElementById("Delete").onclick = function() { removeCheckedboxes(); };
document.getElementById("Restore").onclick = function() { openWindow(sessionWin , -1);};
document.getElementById("currentSession").onclick = function(){getAllWindows(writeTabs);};
document.getElementById("Search").onclick = function() { searchall(document.getElementById("searchtext").value);}
document.getElementById("undo").onclick = function() { UndoDelete(); }
document.getElementById("clear").onclick = function() { 
 $('#clearclickmodal').remove();

 $('body').append(getclearallclick());

 $("#clearclickmodal").modal('show');

    $("#clearclicksubmit").click(function(){
      ClearAll();
    });
   };

document.getElementById("import").onclick = function() { 
  var folder = new Session(null);
  var jsonfile = {};
  jsonfile["_Folders__Bookmark_Bar"] = item;
  chrome.storage.sync.set(jsonfile);
  localStorage.setItem("_Folders__Bookmark_Bar", JSON.stringify(folder));
  currentFolder = "Bookmark_Bar";
  StoreBookMarks("0",""); 
}

TimeInterval();
getAllWindows(writeTabs);